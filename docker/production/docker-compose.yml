version: '3.8'

services:
  web:
    build:
      context: ../../
      dockerfile: docker/production/Dockerfile.web
    image: yourusername/taskmanager-web:latest
    restart: always
    env_file:
      - ../../.env.production
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend
      - frontend

  celery:
    build:
      context: ../../
      dockerfile: docker/production/Dockerfile.celery
    image: yourusername/taskmanager-celery:latest
    restart: always
    env_file:
      - ../../.env.production
    depends_on:
      - redis
      - postgres
    networks:
      - backend

  celery-beat:
    build:
      context: ../../
      dockerfile: docker/production/Dockerfile.celery
    image: yourusername/taskmanager-celery:latest
    restart: always
    command: celery -A task_manager beat -l info
    env_file:
      - ../../.env.production
    depends_on:
      - redis
      - postgres
    networks:
      - backend

  flower:
    build:
      context: ../../
      dockerfile: docker/production/Dockerfile.celery
    image: yourusername/taskmanager-celery:latest
    restart: always
    command: celery -A task_manager flower
    env_file:
      - ../../.env.production
    depends_on:
      - redis
      - celery
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ../../.env.production
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  nginx:
    image: nginx:1.25-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../static:/app/static
      - ../../media:/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ${SSL_CERTIFICATES_PATH}:/etc/nginx/ssl/
    depends_on:
      - web
      - flower
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres_data:
  redis_data: